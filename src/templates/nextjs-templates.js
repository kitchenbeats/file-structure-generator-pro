"use strict";
exports.__esModule = true;
exports.getNextJsBlogStructure = exports.getNextJsDashboardStructure = exports.getFullStackNextJsStructure = exports.getBasicNextJsStructure = exports.registerNextJsTemplates = exports.getNextJsTemplate = exports.nextjsTemplates = void 0;
exports.nextjsTemplates = {
    "page.tsx": "import { Metadata } from 'next';\nimport React from 'react';\n\nexport const metadata: Metadata = {\n  title: 'Page Title',\n  description: 'Page description',\n};\n\nexport default function Page() {\n  return (\n    <div className=\"container mx-auto py-10\">\n      <h1 className=\"text-3xl font-bold\">Page Title</h1>\n    </div>\n  );\n}",
    "layout.tsx": "import React from 'react';\nimport { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: {\n    template: '%s | My Site',\n    default: 'My Site',\n  },\n  description: 'Site description',\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <header>\n          {/* Header content */}\n        </header>\n        <main>{children}</main>\n        <footer>\n          {/* Footer content */}\n        </footer>\n      </body>\n    </html>\n  );\n}",
    "loading.tsx": "export default function Loading() {\n  return (\n    <div className=\"flex justify-center items-center min-h-[200px]\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n    </div>\n  );\n}",
    "error.tsx": "'use client';\n\nimport { useEffect } from 'react';\n\nexport default function Error({ error, reset }: { error: Error & { digest?: string }; reset: () => void; }) {\n  useEffect(() => {\n    console.error(error);\n  }, [error]);\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[400px] px-4\">\n      <h2 className=\"text-2xl font-bold mb-4\">Something went wrong!</h2>\n      <button\n        className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\"\n        onClick={() => reset()}\n      >\n        Try again\n      </button>\n    </div>\n  );\n}",
    "not-found.tsx": "import Link from 'next/link';\n\nexport default function NotFound() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[400px] px-4\">\n      <h2 className=\"text-2xl font-bold mb-4\">Page Not Found</h2>\n      <p className=\"mb-4\">Could not find the requested resource</p>\n      <Link href=\"/\" className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\">\n        Return Home\n      </Link>\n    </div>\n  );\n}",
    "route.ts": "import { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  return NextResponse.json({ message: 'Hello from API route' });\n}\n\nexport async function POST(request: NextRequest) {\n  const data = await request.json();\n  return NextResponse.json({ received: data });\n}",
    "component.tsx": "'use client';\n\nimport React, { useState } from 'react';\n\ninterface ComponentProps {\n  title?: string;\n  children?: React.ReactNode;\n}\n\nexport default function Component({ title = 'Default Title', children }: ComponentProps) {\n  const [isActive, setIsActive] = useState(false);\n  \n  return (\n    <div className=\"p-4 border rounded shadow\">\n      <h2 className=\"text-xl font-semibold mb-2\">{title}</h2>\n      <div className={isActive ? 'bg-gray-100 p-2 rounded' : ''}>\n        {children}\n      </div>\n      <button \n        className=\"mt-2 px-3 py-1 bg-blue-500 text-white text-sm rounded\"\n        onClick={() => setIsActive(!isActive)}\n      >\n        {isActive ? 'Deactivate' : 'Activate'}\n      </button>\n    </div>\n  );\n}",
    "server-component.tsx": "import React from 'react';\n\ninterface ServerComponentProps {\n  data?: any;\n}\n\nexport default async function ServerComponent({ data }: ServerComponentProps) {\n  const fetchedData = data || await fetchData();\n  \n  return (\n    <div className=\"server-rendered\">\n      <h3 className=\"text-lg font-medium mb-2\">Server Component</h3>\n      <pre className=\"bg-gray-100 p-2 rounded text-sm\">\n        {JSON.stringify(fetchedData, null, 2)}\n      </pre>\n    </div>\n  );\n}\n\nasync function fetchData() {\n  return { message: 'This data was fetched on the server' };\n}",
    "middleware.ts": "import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  const requestHeaders = new Headers(request.headers);\n  requestHeaders.set('x-middleware-cache', 'no-cache');\n  \n  const basicAuth = request.headers.get('authorization');\n  if (!basicAuth) {\n    return new NextResponse(\n      JSON.stringify({ error: 'Authentication required' }),\n      {\n        status: 401,\n        headers: {\n          'content-type': 'application/json',\n          'WWW-Authenticate': 'Basic realm=\"Secure Area\"',\n        },\n      }\n    );\n  }\n  \n  return NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  });\n}\n\nexport const config = {\n  matcher: ['/api/:path*', '/admin/:path*'],\n};",
    "actions.ts": "'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport { z } from 'zod';\n\nconst FormSchema = z.object({\n  name: z.string().min(1, { message: 'Name is required' }),\n  email: z.string().email({ message: 'Invalid email address' }),\n  message: z.string().min(10, { message: 'Message must be at least 10 characters' }),\n});\n\ntype FormState = {\n  errors?: {\n    name?: string[];\n    email?: string[];\n    message?: string[];\n    _form?: string[];\n  };\n  success?: boolean;\n};\n\nexport async function submitForm(prevState: FormState, formData: FormData): Promise<FormState> {\n  const validatedFields = FormSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    message: formData.get('message'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      success: false,\n    };\n  }\n\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    revalidatePath('/contact');\n    return { success: true };\n  } catch (error) {\n    return {\n      errors: { _form: ['Failed to submit the form. Please try again.'] },\n      success: false,\n    };\n  }\n}\n\nexport async function loginAction(formData: FormData) {\n  'use server';\n  \n  const email = formData.get('email') as string;\n  const password = formData.get('password') as string;\n  \n  const success = await authenticateUser(email, password);\n  \n  if (!success) {\n    return { error: 'Invalid credentials' };\n  }\n  \n  redirect('/dashboard');\n}\n\nasync function authenticateUser(email: string, password: string): Promise<boolean> {\n  return true;\n}",
    "next.config.js": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  images: {\n    domains: ['images.example.com'],\n    formats: ['image/avif', 'image/webp'],\n  },\n  async rewrites() {\n    return [\n      {\n        source: '/api/external/:path*',\n        destination: 'https://api.example.com/:path*',\n      },\n    ];\n  },\n  env: {\n    NEXT_PUBLIC_ANALYTICS_ID: process.env.NEXT_PUBLIC_ANALYTICS_ID,\n  },\n};\n\nmodule.exports = nextConfig;",
    "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n          950: '#082f49',\n        },\n      },\n      fontFamily: {\n        sans: ['var(--font-inter)'],\n        display: ['var(--font-lexend)'],\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n};",
    "fetchers.ts": "import { cache } from 'react';\n\nexport const getUser = cache(async (id: string) => {\n  const res = await fetch(`https://api.example.com/users/${id}`, {\n    next: { revalidate: 3600 },\n  });\n  \n  if (!res.ok) {\n    throw new Error('Failed to fetch user');\n  }\n  \n  return res.json();\n});\n\nexport async function fetchWithAuth(url: string, options: RequestInit = {}) {\n  const token = getAuthToken();\n  \n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n  \n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(error || 'Network response was not ok');\n  }\n  \n  return response.json();\n}\n\nfunction getAuthToken() {\n  return 'token';\n}",
    "providers.tsx": "'use client';\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ThemeProvider } from 'next-themes';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient();\n\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n} | null;\n\ntype AuthContextType = {\n  user: User;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const userData = localStorage.getItem('user');\n        if (userData) {\n          setUser(JSON.parse(userData));\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    setIsLoading(true);\n    try {\n      const user = { id: '1', name: 'User', email };\n      localStorage.setItem('user', JSON.stringify(user));\n      setUser(user);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem>\n        <AuthProvider>{children}</AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}"
};
// Helper function to convert TypeScript to JavaScript (simplistic)
function convertTsxToJsx(tsCode) {
    return tsCode
        .replace(/: [A-Za-z<>\[\]|]+/g, "")
        .replace(/<[A-Za-z]+>/g, "")
        .replace(/interface [^{]+{[^}]+}/g, "")
        .replace(/import {[^}]+} from ['"]next['"];/g, "import next from 'next';");
}
function getNextJsTemplate(fileName) {
    var baseName = fileName.split("/").pop() || fileName;
    if (exports.nextjsTemplates[baseName]) {
        return exports.nextjsTemplates[baseName];
    }
    if (baseName === "page.js" && exports.nextjsTemplates["page.tsx"]) {
        return convertTsxToJsx(exports.nextjsTemplates["page.tsx"]);
    }
    if (baseName.endsWith(".tsx") &&
        !baseName.includes(".") &&
        exports.nextjsTemplates["component.tsx"]) {
        var componentTemplate = exports.nextjsTemplates["component.tsx"];
        var componentName = baseName.replace(".tsx", "");
        return componentTemplate.replace(/function Component/g, "function ".concat(componentName));
    }
    return undefined;
}
exports.getNextJsTemplate = getNextJsTemplate;
function registerNextJsTemplates(settings) {
    Object.keys(exports.nextjsTemplates).forEach(function (key) {
        settings.defaultTemplates[key] = exports.nextjsTemplates[key];
    });
    var originalGetTemplateFunction = settings.getTemplateForFile;
    settings.getTemplateForFile = function (fileName) {
        var nextjsTemplate = getNextJsTemplate(fileName);
        if (nextjsTemplate) {
            return nextjsTemplate;
        }
        if (originalGetTemplateFunction) {
            return originalGetTemplateFunction(fileName);
        }
        return "";
    };
}
exports.registerNextJsTemplates = registerNextJsTemplates;
// Next.js Project Structure Templates
function getBasicNextJsStructure() {
    return "app/\n\u251C\u2500\u2500 page.tsx\n\u251C\u2500\u2500 layout.tsx\n\u251C\u2500\u2500 not-found.tsx\n\u251C\u2500\u2500 error.tsx\n\u251C\u2500\u2500 loading.tsx\n\u251C\u2500\u2500 components/\n\u2502   \u251C\u2500\u2500 ui/\n\u2502   \u2502   \u251C\u2500\u2500 button.tsx\n\u2502   \u2502   \u251C\u2500\u2500 card.tsx\n\u2502   \u2502   \u2514\u2500\u2500 input.tsx\n\u2502   \u251C\u2500\u2500 layout/\n\u2502   \u2502   \u251C\u2500\u2500 header.tsx\n\u2502   \u2502   \u2514\u2500\u2500 footer.tsx\n\u2502   \u2514\u2500\u2500 hero.tsx\n\u251C\u2500\u2500 lib/\n\u2502   \u2514\u2500\u2500 utils.ts\n\u251C\u2500\u2500 styles/\n\u2502   \u2514\u2500\u2500 globals.css\n\u251C\u2500\u2500 public/\n\u2502   \u251C\u2500\u2500 images/\n\u2502   \u2502   \u2514\u2500\u2500 logo.svg\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251C\u2500\u2500 next.config.js\n\u2514\u2500\u2500 tailwind.config.js";
}
exports.getBasicNextJsStructure = getBasicNextJsStructure;
function getFullStackNextJsStructure() {
    return "app/\n\u251C\u2500\u2500 page.tsx\n\u251C\u2500\u2500 layout.tsx\n\u251C\u2500\u2500 not-found.tsx\n\u251C\u2500\u2500 error.tsx\n\u251C\u2500\u2500 loading.tsx\n\u251C\u2500\u2500 api/\n\u2502   \u251C\u2500\u2500 auth/\n\u2502   \u2502   \u2514\u2500\u2500 route.ts\n\u2502   \u251C\u2500\u2500 users/\n\u2502   \u2502   \u2514\u2500\u2500 route.ts\n\u2502   \u2514\u2500\u2500 products/\n\u2502       \u2514\u2500\u2500 route.ts\n\u251C\u2500\u2500 auth/\n\u2502   \u251C\u2500\u2500 login/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u251C\u2500\u2500 register/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2514\u2500\u2500 forgot-password/\n\u2502       \u2514\u2500\u2500 page.tsx\n\u251C\u2500\u2500 dashboard/\n\u2502   \u251C\u2500\u2500 page.tsx\n\u2502   \u251C\u2500\u2500 layout.tsx\n\u2502   \u2514\u2500\u2500 loading.tsx\n\u251C\u2500\u2500 components/\n\u2502   \u251C\u2500\u2500 ui/\n\u2502   \u2502   \u251C\u2500\u2500 button.tsx\n\u2502   \u2502   \u251C\u2500\u2500 card.tsx\n\u2502   \u2502   \u251C\u2500\u2500 input.tsx\n\u2502   \u2502   \u251C\u2500\u2500 form.tsx\n\u2502   \u2502   \u2514\u2500\u2500 dropdown.tsx\n\u2502   \u251C\u2500\u2500 layout/\n\u2502   \u2502   \u251C\u2500\u2500 header.tsx\n\u2502   \u2502   \u251C\u2500\u2500 sidebar.tsx\n\u2502   \u2502   \u2514\u2500\u2500 footer.tsx\n\u2502   \u251C\u2500\u2500 auth/\n\u2502   \u2502   \u251C\u2500\u2500 login-form.tsx\n\u2502   \u2502   \u2514\u2500\u2500 register-form.tsx\n\u2502   \u2514\u2500\u2500 dashboard/\n\u2502       \u2514\u2500\u2500 stats-card.tsx\n\u251C\u2500\u2500 lib/\n\u2502   \u251C\u2500\u2500 utils.ts\n\u2502   \u251C\u2500\u2500 api.ts\n\u2502   \u251C\u2500\u2500 db.ts\n\u2502   \u2514\u2500\u2500 auth.ts\n\u251C\u2500\u2500 middleware.ts\n\u251C\u2500\u2500 providers.tsx\n\u251C\u2500\u2500 styles/\n\u2502   \u2514\u2500\u2500 globals.css\n\u251C\u2500\u2500 public/\n\u2502   \u251C\u2500\u2500 images/\n\u2502   \u2502   \u2514\u2500\u2500 logo.svg\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251C\u2500\u2500 next.config.js\n\u251C\u2500\u2500 tailwind.config.js\n\u2514\u2500\u2500 .env.local";
}
exports.getFullStackNextJsStructure = getFullStackNextJsStructure;
function getNextJsDashboardStructure() {
    return "app/\n\u251C\u2500\u2500 page.tsx\n\u251C\u2500\u2500 layout.tsx\n\u251C\u2500\u2500 not-found.tsx\n\u251C\u2500\u2500 error.tsx\n\u251C\u2500\u2500 loading.tsx\n\u251C\u2500\u2500 api/\n\u2502   \u251C\u2500\u2500 auth/\n\u2502   \u2502   \u2514\u2500\u2500 route.ts\n\u2502   \u251C\u2500\u2500 stats/\n\u2502   \u2502   \u2514\u2500\u2500 route.ts\n\u2502   \u2514\u2500\u2500 users/\n\u2502       \u2514\u2500\u2500 route.ts\n\u251C\u2500\u2500 auth/\n\u2502   \u251C\u2500\u2500 login/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2514\u2500\u2500 forgot-password/\n\u2502       \u2514\u2500\u2500 page.tsx\n\u251C\u2500\u2500 dashboard/\n\u2502   \u251C\u2500\u2500 page.tsx\n\u2502   \u251C\u2500\u2500 layout.tsx\n\u2502   \u251C\u2500\u2500 loading.tsx\n\u2502   \u251C\u2500\u2500 users/\n\u2502   \u2502   \u251C\u2500\u2500 page.tsx\n\u2502   \u2502   \u2514\u2500\u2500 [id]/\n\u2502   \u2502       \u2514\u2500\u2500 page.tsx\n\u2502   \u251C\u2500\u2500 settings/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2514\u2500\u2500 reports/\n\u2502       \u251C\u2500\u2500 page.tsx\n\u2502       \u251C\u2500\u2500 daily/\n\u2502       \u2502   \u2514\u2500\u2500 page.tsx\n\u2502       \u2514\u2500\u2500 monthly/\n\u2502           \u2514\u2500\u2500 page.tsx\n\u251C\u2500\u2500 components/\n\u2502   \u251C\u2500\u2500 ui/\n\u2502   \u2502   \u251C\u2500\u2500 button.tsx\n\u2502   \u2502   \u251C\u2500\u2500 card.tsx\n\u2502   \u2502   \u251C\u2500\u2500 table.tsx\n\u2502   \u2502   \u251C\u2500\u2500 modal.tsx\n\u2502   \u2502   \u251C\u2500\u2500 dropdown.tsx\n\u2502   \u2502   \u2514\u2500\u2500 tabs.tsx\n\u2502   \u251C\u2500\u2500 layout/\n\u2502   \u2502   \u251C\u2500\u2500 header.tsx\n\u2502   \u2502   \u2514\u2500\u2500 sidebar.tsx\n\u2502   \u251C\u2500\u2500 charts/\n\u2502   \u2502   \u251C\u2500\u2500 bar-chart.tsx\n\u2502   \u2502   \u251C\u2500\u2500 line-chart.tsx\n\u2502   \u2502   \u2514\u2500\u2500 pie-chart.tsx\n\u2502   \u2514\u2500\u2500 dashboard/\n\u2502       \u251C\u2500\u2500 stats-card.tsx\n\u2502       \u251C\u2500\u2500 recent-activity.tsx\n\u2502       \u2514\u2500\u2500 data-table.tsx\n\u251C\u2500\u2500 lib/\n\u2502   \u251C\u2500\u2500 utils.ts\n\u2502   \u251C\u2500\u2500 api.ts\n\u2502   \u251C\u2500\u2500 db.ts\n\u2502   \u2514\u2500\u2500 auth.ts\n\u251C\u2500\u2500 actions/\n\u2502   \u251C\u2500\u2500 user-actions.ts\n\u2502   \u2514\u2500\u2500 report-actions.ts\n\u251C\u2500\u2500 middleware.ts\n\u251C\u2500\u2500 providers.tsx\n\u251C\u2500\u2500 styles/\n\u2502   \u2514\u2500\u2500 globals.css\n\u251C\u2500\u2500 public/\n\u2502   \u251C\u2500\u2500 images/\n\u2502   \u2502   \u2514\u2500\u2500 logo.svg\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251C\u2500\u2500 next.config.js\n\u251C\u2500\u2500 tailwind.config.js\n\u2514\u2500\u2500 .env.local";
}
exports.getNextJsDashboardStructure = getNextJsDashboardStructure;
function getNextJsBlogStructure() {
    return "app/\n\u251C\u2500\u2500 page.tsx\n\u251C\u2500\u2500 layout.tsx\n\u251C\u2500\u2500 not-found.tsx\n\u251C\u2500\u2500 error.tsx\n\u251C\u2500\u2500 loading.tsx\n\u251C\u2500\u2500 about/\n\u2502   \u2514\u2500\u2500 page.tsx\n\u251C\u2500\u2500 contact/\n\u2502   \u2514\u2500\u2500 page.tsx\n\u251C\u2500\u2500 blog/\n\u2502   \u251C\u2500\u2500 page.tsx\n\u2502   \u251C\u2500\u2500 layout.tsx\n\u2502   \u251C\u2500\u2500 loading.tsx\n\u2502   \u2514\u2500\u2500 [slug]/\n\u2502       \u251C\u2500\u2500 page.tsx\n\u2502       \u2514\u2500\u2500 loading.tsx\n\u251C\u2500\u2500 api/\n\u2502   \u251C\u2500\u2500 posts/\n\u2502   \u2502   \u2514\u2500\u2500 route.ts\n\u2502   \u2514\u2500\u2500 comments/\n\u2502       \u2514\u2500\u2500 route.ts\n\u251C\u2500\u2500 components/\n\u2502   \u251C\u2500\u2500 ui/\n\u2502   \u2502   \u251C\u2500\u2500 button.tsx\n\u2502   \u2502   \u251C\u2500\u2500 card.tsx\n\u2502   \u2502   \u2514\u2500\u2500 input.tsx\n\u2502   \u251C\u2500\u2500 layout/\n\u2502   \u2502   \u251C\u2500\u2500 header.tsx\n\u2502   \u2502   \u2514\u2500\u2500 footer.tsx\n\u2502   \u251C\u2500\u2500 blog/\n\u2502   \u2502   \u251C\u2500\u2500 post-card.tsx\n\u2502   \u2502   \u251C\u2500\u2500 post-content.tsx\n\u2502   \u2502   \u251C\u2500\u2500 post-header.tsx\n\u2502   \u2502   \u2514\u2500\u2500 comment-section.tsx\n\u2502   \u2514\u2500\u2500 common/\n\u2502       \u251C\u2500\u2500 social-share.tsx\n\u2502       \u2514\u2500\u2500 newsletter-signup.tsx\n\u251C\u2500\u2500 lib/\n\u2502   \u251C\u2500\u2500 utils.ts\n\u2502   \u251C\u2500\u2500 mdx.ts\n\u2502   \u2514\u2500\u2500 api.ts\n\u251C\u2500\u2500 content/\n\u2502   \u2514\u2500\u2500 posts/\n\u2502       \u251C\u2500\u2500 hello-world.mdx\n\u2502       \u2514\u2500\u2500 getting-started.mdx\n\u251C\u2500\u2500 styles/\n\u2502   \u2514\u2500\u2500 globals.css\n\u251C\u2500\u2500 public/\n\u2502   \u251C\u2500\u2500 images/\n\u2502   \u2502   \u2514\u2500\u2500 logo.svg\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251C\u2500\u2500 next.config.js\n\u251C\u2500\u2500 tailwind.config.js\n\u2514\u2500\u2500 .env.local";
}
exports.getNextJsBlogStructure = getNextJsBlogStructure;
